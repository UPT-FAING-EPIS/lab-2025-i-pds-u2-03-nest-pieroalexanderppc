"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMermaidDSL = exports.getNomnomlDSL = exports.parseProject = exports.createDiagram = void 0;
const io_1 = require("./io");
const parser_1 = require("./parser/parser");
const emitter_1 = require("./emitter");
const nomnoml_template_1 = require("./renderer/nomnoml-template");
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs/promises"));
const parser_2 = require("./parser");
const mermaid_template_1 = require("./renderer/mermaid-template");
async function createDiagram(settings) {
    // parse
    const declarations = parseProject(settings);
    if (declarations.length === 0) {
        console.log(chalk_1.default.red("\nno declarations found! tsconfig: " + settings.tsconfig, " glob: " + settings.glob));
        return;
    }
    // emit
    return Promise.all([createMermaidDSL(declarations, settings),
        createNomnomlSVG(declarations, settings)]);
}
exports.createDiagram = createDiagram;
/**
 * parse a typescript project
 * @param settings tsuml2 settings
 * @returns
 */
function parseProject(settings) {
    const ast = (0, parser_1.getAst)(settings.tsconfig, settings.glob);
    const files = ast.getSourceFiles();
    // parser
    console.log(chalk_1.default.yellow("parsing source files:"));
    const declarations = files.map(f => {
        let classes = f.getClasses();
        let interfaces = f.getInterfaces();
        let enums = f.getEnums();
        let types = f.getTypeAliases();
        const path = f.getFilePath();
        console.log(chalk_1.default.yellow(path));
        if (settings.exportedTypesOnly) {
            classes = removeNonExportedNodes(classes);
            interfaces = removeNonExportedNodes(interfaces);
            enums = removeNonExportedNodes(enums);
            types = removeNonExportedNodes(types);
        }
        const classDeclarations = classes.map(parser_1.parseClasses);
        const interfaceDeclarations = interfaces.map(parser_1.parseInterfaces);
        return {
            fileName: path,
            classes: classDeclarations,
            interfaces: interfaceDeclarations,
            types: types.map(parser_1.parseTypes).filter(t => t !== undefined),
            enums: enums.map(parser_1.parseEnum),
            heritageClauses: [
                ...classDeclarations.filter(decl => decl.heritageClauses.length > 0).map(decl => decl.heritageClauses),
                ...interfaceDeclarations.filter(decl => decl.heritageClauses.length > 0).map(decl => decl.heritageClauses)
            ]
        };
    });
    if (settings.memberAssociations) {
        (0, parser_2.parseAssociations)(declarations);
    }
    return declarations;
}
exports.parseProject = parseProject;
async function createNomnomlSVG(declarations, settings) {
    const outDSL = settings.outDsl;
    const outFile = settings.outFile;
    if (outDSL === "" && outFile === "") {
        return;
    }
    let promises = [];
    const dsl = getNomnomlDSL(declarations, settings);
    if (outDSL !== "") {
        promises.push(writeDsl(dsl, outDSL, 'nomnoml'));
    }
    if (outFile === "") {
        return;
    }
    //render
    console.log(chalk_1.default.yellow("\nrender to svg"));
    let svg = (0, io_1.renderNomnomlSVG)(dsl);
    if (settings.typeLinks) {
        console.log(chalk_1.default.yellow("adding type links to svg"));
        svg = (0, emitter_1.postProcessSvg)(svg, outFile, declarations);
    }
    console.log(chalk_1.default.green("\nwriting SVG"));
    try {
        promises.push(fs.writeFile(outFile, svg));
        await Promise.all(promises);
    }
    catch (err) {
        console.log(chalk_1.default.redBright("Error writing file: " + err));
    }
    return svg;
}
async function createMermaidDSL(declarations, settings) {
    if (!settings.outMermaidDsl) {
        return;
    }
    const dsl = getMermaidDSL(declarations, settings);
    await writeDsl(dsl, settings.outMermaidDsl, 'mermaid');
    return dsl;
}
/**
 * get the nomnoml DSL representing the class diagram as a string
 * @param declarations
 * @param settings
 * @returns
 */
function getNomnomlDSL(declarations, settings) {
    console.log(chalk_1.default.yellow("\nemitting nomnoml declarations:"));
    return getNomnomlDSLHeader(settings) + "\n" + (0, emitter_1.emit)(declarations, new emitter_1.Emitter(new nomnoml_template_1.NomnomlTemplate(settings)));
}
exports.getNomnomlDSL = getNomnomlDSL;
/**
 * get the mermaid DSL representing the class diagram as a string
 * @param declarations
 * @param settings
 * @returns
 */
function getMermaidDSL(declarations, settings) {
    console.log(chalk_1.default.yellow("\nemitting mermaid declarations:"));
    return getMermaidDSLHeader(settings) + "\n" + (0, emitter_1.emit)(declarations, new emitter_1.Emitter(new mermaid_template_1.MermaidTemplate(settings)));
}
exports.getMermaidDSL = getMermaidDSL;
function getNomnomlDSLHeader(settings) {
    return '#.interface: fill=lightblue\n' +
        '#.enumeration: fill=lightgreen\n' +
        '#.type: fill=lightgray\n' +
        settings.nomnoml.join("\n");
}
function getMermaidDSLHeader(settings) {
    return '\nclassDiagram\n' + settings.mermaid.join("\n") + '\n';
}
async function writeDsl(dsl, fileName, dslType) {
    console.log(chalk_1.default.green(`\nwriting ${dslType} DSL`));
    try {
        await fs.writeFile(fileName, dsl);
    }
    catch (err) {
        console.log(chalk_1.default.redBright(`Error writing ${dslType} DSL file: ${err}`));
    }
}
function removeNonExportedNodes(nodes) {
    return nodes.filter(n => n.isExported());
}
//# sourceMappingURL=index.js.map