"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseSettingsFromArgs = void 0;
const yargs_1 = __importDefault(require("yargs"));
const fs = __importStar(require("fs"));
/**
 * parses a json file and merges in the provided options
 * @param json
 */
function fromJSON(settings, json) {
    Object.assign(settings, JSON.parse(json));
}
function parseSettingsFromArgs(settings) {
    const argv = yargs_1.default.option('glob', {
        describe: "pattern to match the source files (i.e.: ./src/**/*.ts)",
        alias: "g",
        string: true,
        required: true
    }).option('tsconfig', {
        default: settings.tsconfig,
        describe: "the path to tsconfig.json file"
    }).option('outFile', {
        describe: "the path to the output file",
        alias: "o",
        default: settings.outFile,
    }).option('propertyTypes', {
        default: settings.propertyTypes,
        describe: "show property types and method return types",
        boolean: true
    }).option('modifiers', {
        default: settings.modifiers,
        describe: "show modifiers like public,protected,private,static",
        boolean: true
    }).option('typeLinks', {
        default: settings.typeLinks,
        describe: "add links for classes, interface, enums that point to the source files",
        boolean: true
    }).option('nomnoml', {
        describe: "nomnoml layouting and styling options (an array of strings, each representing a nomnoml line), i.e.: --nomnoml \"#arrowSize: 1\" \"#.interface: fill=#8f8 dashed\" ",
        array: true,
        string: true
    }).option('outDsl', {
        describe: "the path to the output DSL file (nomnoml)",
        string: true,
        required: false,
    }).option('mermaid', {
        describe: "mermaid layouting and styling options (an array of strings, each representing a mermaid line), i.e.: --mermaid \"direction LR\" ",
        array: true,
        string: true
    }).option('outMermaidDsl', {
        describe: "the path to the output mermaid DSL file",
        string: true,
        required: false,
    }).option('memberAssociations', {
        describe: "show associations between classes, interfaces, types and their member types",
        alias: 'm',
        boolean: true,
        required: false,
        default: settings.memberAssociations
    }).option('exportedTypesOnly', {
        describe: "show only exported types, classes, interfaces, enums",
        boolean: true,
        required: false,
        default: settings.exportedTypesOnly
    }).option('config', {
        describe: "path to a json config file (command line options can be provided as keys in it)",
        string: true
    }).argv;
    if (argv.config) {
        //parse and apply the config file
        const config = fs.readFileSync(argv.config).toString();
        fromJSON(settings, config);
    }
    if (argv.glob) {
        settings.glob = argv.glob;
    }
    if (argv.tsconfig && !yargs_1.default.parsed.defaulted.tsconfig) {
        settings.tsconfig = argv.tsconfig;
    }
    if (argv.outFile && !yargs_1.default.parsed.defaulted.outFile) {
        settings.outFile = argv.outFile;
    }
    if (argv.nomnoml) {
        settings.nomnoml = argv.nomnoml;
    }
    if (argv.modifiers != null && !yargs_1.default.parsed.defaulted.modifiers) {
        settings.modifiers = argv.modifiers;
    }
    if (argv.propertyTypes != null && !yargs_1.default.parsed.defaulted.propertyTypes) {
        settings.propertyTypes = argv.propertyTypes;
    }
    if (argv.typeLinks != null && !yargs_1.default.parsed.defaulted.typeLinks) {
        settings.typeLinks = argv.typeLinks;
    }
    if (argv.outDsl != null && !yargs_1.default.parsed.defaulted.outDsl) {
        settings.outDsl = argv.outDsl;
    }
    if (argv.mermaid) {
        settings.mermaid = argv.mermaid;
    }
    if (argv.outMermaidDsl != null && !yargs_1.default.parsed.defaulted.outMermaidDsl) {
        settings.outMermaidDsl = argv.outMermaidDsl;
    }
    if (argv.memberAssociations != null && !yargs_1.default.parsed.defaulted.memberAssociations) {
        settings.memberAssociations = argv.memberAssociations;
    }
    if (argv.exportedTypesOnly != null && !yargs_1.default.parsed.defaulted.exportedTypesOnly) {
        settings.exportedTypesOnly = argv.exportedTypesOnly;
    }
}
exports.parseSettingsFromArgs = parseSettingsFromArgs;
//# sourceMappingURL=parse-settings.js.map